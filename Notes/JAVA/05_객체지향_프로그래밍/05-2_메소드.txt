Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-09-06T10:11:44+09:00

====== 05-2 메소드 ======
Created 목요일 06 9월 2018

[ ] ====== 메소드를 사용하는 이유 ======


	클래스 하나하나가 독립적으로 활동할수 있어야 한다. 
	
	한번 만들어두면 수정하지 않고 다른곳에서도 불러서 쓸수 있다. 여러번 반복사용
	

--------------------
public class Test {
	public __int__ sum(int a, int b) {  			**//void는 리턴값이 없을때 사용하고 int라고 입력했으므로 리턴값은 int(정수)이다.**
									   //__static__을 쓰면 **오버라이딩 불가** ex) public __static__ int sum(int a, intb )
		return a+b;
	}

	public static void main(String[] args) {  		
		int a = 3;
		int b = 4;

		Test myTest = __new__ Test();			**// new는 참조하는 데이터를 만든다고 선언 // Test클라스의 새로운 인스턴스를 만든다**
		int c = myTest.sum(a, b);

		System.out.println(c);
	}
}

--------------------

[ ] ====== 메소드의 입력값과 리턴값 ======


ㅇ 메소드의 구조

1. 입력값이 없는 메소드 
public String say( ) {
	return "Hi";
}

2. 리턴값이 없는 메소드 

public class Test4 {
	public void sum(int a, int b) {
		System.out.println(a + "과 " + b + "의 합은" + (a+b)+"입니다.");     // 이부분은 리턴값이 아니고 콘솔로그에표시하는것 // 출력과 리턴값은 다르다!
		
	}

	public static __void__ main(String[] args) {  //리턴값이 없을때는 void
		
	Test4 myTest = new Test4();
	myTest.sum(3, 4);
	}

}

3. 입력값도 리턴값도 없는 메소드
4. 리턴의 또 다른 쓰임새 
	__void문에서만__ return으로 메소드를 빠져나갈수 있다. 
	return 자료형이 void가 아닌데 rturn만 입력하면 컴파일시 오류가 발생한다.

5. 메소드 내에서 선언된 변수의 효력 범위
	a. 값을 주고 받기 위해서는 매개변수가 필요하다.
	b. 멤버변수에 리턴값이 있어야한다.
	c. 메소드에서 쓰이는 변수는 메소드 밖의 변수 이름들과는 전혀 상관이 없다.
	d. 로컬변수이다. (지역변수)

__참조형은 주소를 주고받는다!!! 강조강조__

public class Test {

	int a;  // 객체변수 a

	public void vartest(Test test) {    		// myTest의 주소를 아래에서 전달받았다.  타입이 Test인지 확인하고 
		test.a++;						// myTest의 주소에 있는 a의 값을 증가시킨다. 
	}

	public static void main(String[] args) {
		Test myTest = new Test();			// myTest라는 객체를 만든다
		myTest.a = 1;					// myTest라는 주소로 가서 a의 값에 1을 대입한다
		myTest.vartest(myTest);			// myTest라는 주소로 가서 vartest에 myTest의 주소를 전달한다. 
		System.out.println(myTest.a);			// myTest의 주소에 있는 a를 출력한다 // a는 위에서 2로바뀌었다 2가 출력된다.
	}
}

__this를 사용하여 수정한 버전__
public class Test {

	int a;  // 객체변수 a

	public void vartest() {
		this.a++;
	}

	public static void main(String[] args) {
		Test myTest = new Test();
		myTest.a = 1;
		myTest.vartest();
		System.out.println(myTest.a);
	}
}
