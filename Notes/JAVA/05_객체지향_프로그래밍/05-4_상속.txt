Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-09-06T13:56:10+09:00

====== 05-4 상속 ======
Created 목요일 06 9월 2018


[ ] ====== 이클립스에서 상속 설정하기  ======



	package Explorer에서 패키지명에 오른쪽클릭을 하고 new > class 를 할수 있다.
	Package는 자동으로 입력되지만 클릭을 제대로 하지 않으면 다른 이름이 들어간다 (수정이 가능하다)
	클래스를 생성할때 **Superclass** 를 지정해주면 그 클래스를 **상속**받게 된다. 
	
	
	
	==== 많이 쓰는 메소드 setName과 get ==== ====
	
	클래스가 멤버변수로 name을 가지고 있을때 
	메뉴바에서 Source > Generate Getters and Setters 를 통해서 
	getName(), setName(String) 을 사용할수 있다. 
	
	**setName을 사용하는 이유**
	값을 넣기 이전에 데이터의 타입이 맞는지 확인하는 절차를 거치기 위해서 사용한다.
	----------------------------------------------
	public class  Dog  extends Animal {   		
		String name;					// 문자열 name을 선언해주고
	
		public void setName(String name) {   // 여기서 입력받은 데이터가 문자열이 맞는지 검열
			this.name = name;			// 타입이 맞으면 name을 넣어준다. 
		}
	}
	---------------------------------------------------

	
	
	


[ ] ====== extends ======

	사전적 의미 extend: 더 길게 크게 넓게 만들다
	상속받는 다는것을 나타낸다.
	public class Dog __extends__ Animal  //Dog는 Animal을 상속받는다
	public class HouseDog __extends__ Dog  // HouseDog는 Dog를 상속받는다.
	

[ ] ====== IS_A 관계 ======



	Dog클래스는 Animal클래스를 상속받았다. 즉 Animal의 하위 개념이라고 할수 있다.
	Animal클래스는 Dog클래스를 상속받을수 없다.
	이런 관계를 IS-A관계라고 한다.
	
	
	Animal은 Object를 상속받는다. 
	자바에서 만드는 모든 클래스는 Object라는 클래스를 상속받게 되어 있다
	


====== 메소드 오버라이딩 ======


부모클래스의 메소드를 **자식클래스가 동일한 형태로 또다시 구현하는 행위**를 메소드 __오버라이딩__(Method Overriding)이라고 한다. (※ 메소드 덮어쓰기)

--------------------
public class Dog extends Animal {
	public void __sleep(__) {						// 메소드 __sleep__를 가지고 있다.
		System.out.println(this.name+" zzz");
	}

	public static void main(String[] args) {
		Dog dog = new Dog();
		dog.setName("poppy");
		System.out.println(dog.name);
		dog.sleep();
	}
}

--------------------
public class HouseDog extends Dog {  					//Dog클래스를 상속받는 HouseDog클래스이다.
	public void sleep() {
		System.out.println(this.name+" zzz in house");			// Dog클래스의 sleep을 사용하지 않고 새로 쓰여진 sleep를 사용한다
											   // __오버라이딩은 가까운것부터 실행된다. 즉 가지고 있는 메소드를 실행하게 된다.__
	} 

	public static void main(String[] args) {
		HouseDog houseDog = new HouseDog();
		houseDog.setName("happy");
		houseDog.sleep();
	}
}


--------------------




[ ] ====== 메소드 오버로딩 ======

입력항목이 다른 경우 동일한 이름의 메소드를 만들 수 있는데 이것을 어려운 말로 메소드 __오버로딩__//(//method overloading)이라고 부른다
--------------------
public class HouseDog extends Dog {
	public void __sleep__() {										// __sleep__ 메소드가 존재한다.
		System.out.println(this.name+" zzz in house");
	} 

	public void __sleep__**(int hour)** {								// 동일한 이름의 sleep 메소드를 또 생성할 수 있다.
														// **단 메소드의 입력항복이 다를 경우만 가능하다.** 
														// 입력항목이 다르다는 것은 메소드 이름은 같으나 __타입__이 다른경우이다. 
		System.out.println(this.name+" zzz in house for " + hour + " hours");
	} 

	public static void main(String[] args) {
		HouseDog houseDog = new HouseDog();
		houseDog.setName("happy");
		houseDog.sleep();     // sleep() 메소드 호출
		houseDog.sleep(3);   // sleep(int hour) 메소드 호출
	}
}

--------------------

[ ] ====== 자바는 다중상속을 지원하지 않는다. ======

