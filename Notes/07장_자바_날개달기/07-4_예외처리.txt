Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2018-09-12T11:21:29+09:00

====== 07-4 예외처리 ======
Created 수요일 12 9월 2018

[ ] **RuntimeException(발생이 확실하지 않음) 프로그램 실행시 발생하는 예외 **
	java.lang.RuntimeException클래스를 상속한 예외들이다.
	명시적인 **예외처리를 강제하지 않기 때문에 언체크 예외**라고 불린다 .    // 어떤예외인지 몰라서 처리도 할수 없으므로
														// 예외 처리문이 없어도 실행된다 .
	또는 대표클래스 이름을 따서 런타임 예외라고 한다. 
[ ] **Exception(발생 예측 가능) 컴파일시 발생하는 예외 **
	어떤 에러가 발생할지 예측할수 있기 때문에 **예외처리가 꼭 있어야한다.** 
	catch 문으로 잡든지, 아니면 throws를 정의해서 메소드 밖으로 던져야 한다

[ ] **예외 처리하기 try catch finally**

--------------------
**try** {
	...
} **catch**(예외1) {
	...
} **catch**(예외2) {
	...
...
}

--------------------
int c;
**try** {
	c = 4 / 0;
}**catch**(ArithmeticException e) {
	c = -1;
}


--------------------

public class Test {
	public void shouldBeRun() {
		System.out.println("ok thanks.");
	}

	public static void main(String[] args) {
		Test test = new Test();
		int c;
		**try** {
			c = 4 / 0;
		} **catch** (ArithmeticException e) {
			c = -1;
		} **finally** {
			test.shouldBeRun();
		}
	}
}
--------------------


[ ] **예외 발생시키기  throw, throws**

--------------------
**throw문**
public class Test {
	public void sayNick(String nick) {
		try {
			if("fool".equals(nick)) {
				**throw new** __FoolException()__;				// 예외를 발생킨다. // __Exception을 상속받은 FoolException클래스__를 만들은것
			}
			System.out.println("당신의 별명은 "+nick+" 입니다.");
		}**catch(FoolException e)** {					// 발생한 에러를 잡아서 처리시킨다
			System.err.println("FoolException이 발생했습니다.");
		}
	}

	public static void main(String[] args) {
		Test test = new Test();
		test.sayNick("fool");						// 에러문이 출력되고
		test.sayNick("genious");					// 정상실행된다. 
	}
} 

**throws문**
public class Test {
	public void sayNick(String nick) **throws FoolException** {		// 발생한 예외를 실행문으로 던진다. (호출한곳으로)
		 if("fool".equals(nick)) {
				**throw new** FoolException(); 					// 예외를 발생시키고
			}
			System.out.println("당신의 별명은 "+nick+" 입니다.");
	}

	public static void main(String[] args) {
		Test test = new Test();
			**try** {
				test.sayNick("fool");
				test.sayNick("genious");
			}**catch(FoolException e) {							//**에러를 받아서 중단시킨다.
				System.err.println("FoolException이 발생했습니다.");
			}
	}
} 

--------------------

[ ] **트랜잭션**
하나의 작업 단위를 뜻한다. 
